package com.transcript.service.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.MalformedURLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import org.springframework.stereotype.Component;
import com.lowagie.text.Anchor;
import com.lowagie.text.BadElementException;
import com.lowagie.text.Chapter;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.List;
import com.lowagie.text.ListItem;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Section;
import com.lowagie.text.pdf.PdfDocument;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.transcript.models.Patient;
import com.transcript.service.PDFSaver;

@Component
public class PDFSaverImpl implements PDFSaver {
	
		private static Font catFont = new Font(Font.TIMES_ROMAN, 18,Font.BOLD);
	    private static Font smallFont = new Font(Font.TIMES_ROMAN, 12,Font.NORMAL);
	    private static Font subFont = new Font(Font.TIMES_ROMAN, 16,Font.BOLD);
	    private static Font smallBold = new Font(Font.TIMES_ROMAN, 10,Font.BOLD);
	   
	@Override
	public boolean savepdf(Patient p) 
	{
		// TODO Auto-generated method stub
		int i=1;
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDate localDate = LocalDate.now();
		String path = "D:/SaiPsychiatryOutPatientClinicNotes/";
		String directoryName = dtf.format(localDate);
		File directory = new File(path.concat(String.valueOf(directoryName)));
		File filename  = new File(directory.getAbsolutePath()+"\\"+String.valueOf(p.getName()+".pdf"));
		while(filename.exists())
		{
			filename = new File(directory.getAbsolutePath()+"\\"+String.valueOf(p.getName())+"_"+i+".pdf");
			i++;
		}
		if(!directory.exists())
		{directory.mkdir();}
		
		   try 
		   {
			   Document document = new Document();
	           
				PdfWriter.getInstance(document, new FileOutputStream(directory.getAbsolutePath()+"\\"+filename.getName()));
			
	           document.open();
	           addMetaData(document);
	           addTitlePage(document, p.getName());
	           addContent(document, p);
	           document.close();
		   }
		   catch (Exception fex)
		   {
			   System.out.println("Exception while trying to create simple document - " + fex);
		   }

		return filename.exists();
	}
	
	 private static void addMetaData(Document document) {
	        document.addTitle("Sai Psychiatry Out Patient Clinic");
	        document.addSubject("Psychiatric Evaluation");
	        document.addAuthor("Sai Lakshmi Ramanujam");
	        document.addCreator("Sai Lakshmi Ramanujam");
	    }
	 
	 private static void addTitlePage(Document document, String name)
	            throws DocumentException {
		        Paragraph preface = new Paragraph();
		        preface.setAlignment(Element.ALIGN_CENTER);
		        // We add one empty line
		        addEmptyLine(preface, 1);
		        // Lets write a big header
		        Paragraph temp = new Paragraph("Sai Psychiatry Out Patient Clinic", catFont);
		        temp.setAlignment(Element.ALIGN_CENTER);
		        temp.setAlignment(300);
		        preface.add(temp);
	
		        addEmptyLine(preface, 1);
		        // Will create: Report generated by: _name, _date
		        
		        
		        Paragraph middle = new Paragraph("Psychiatric Evaluation for " + name,smallBold);
		        middle.setAlignment(Element.ALIGN_CENTER);
		        preface.add(middle);
		        addEmptyLine(preface, 2);
		        
				try {
					Image image1 = Image.getInstance("src\\main\\webapp\\img\\psychiatry.png");
					image1.setAlignment(Element.ALIGN_CENTER);
					image1.setTransparency(new int[5]);
					preface.add(image1);
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		        
		        
		        addEmptyLine(preface, 20);
		        Paragraph body = new Paragraph("Created By: Sai Lakshmi Ramanujam, " + new Date(),smallBold);
		        body.setAlignment(Element.ALIGN_CENTER);
		        preface.add(body);
		        
		        
		        
		        document.add(preface);
		        // Start a new page
		        document.newPage();
	    }
	 
	 private static void addEmptyLine(Paragraph paragraph, int number) {
	        for (int i = 0; i < number; i++) {
	            paragraph.add(new Paragraph(" "));
	        }
	    }
	 
	 private static void addContent(Document document, Patient p) throws DocumentException {
		 	
		 
//	        Anchor anchor = new Anchor("Psychiatric Evaluation", catFont);
	        Paragraph title = new Paragraph("Psychiatric Evaluation", catFont);
	        title.setAlignment(Element.ALIGN_CENTER);
	        document.add(title);
	        // Second parameter is the number of the chapter
//	        Chapter catPart = new Chapter(title, 1);

	        Paragraph subPara = new Paragraph(p.getName(), subFont);
	        subPara.setAlignment(Element.ALIGN_CENTER);
//	        Section subCatPart = catPart.addSection(subPara);
	        document.add(subPara);
	        
	        Paragraph paragraph = new Paragraph();
	        addEmptyLine(paragraph, 5);
	        
	        Field[] fields = p.getClass().getDeclaredFields();
	        for ( Field field : fields  ) 
		      {
	        	try {
	        			field.setAccessible(true);		        	
						if(field.get(p) != null)
						{
							String s = field.getName().toString().replace("_", " ").toUpperCase();
							Phrase pr = new Phrase(s+" : ",smallBold);
							paragraph.add(pr);
							Phrase pr1 = new Phrase(field.get(p).toString(),smallFont);
							paragraph.add(pr1);
							addEmptyLine(paragraph, 1);
						}
						else 
						{
							String s = field.getName().toString().replace("_", " ").toUpperCase();
							paragraph.add(new Phrase(s+" : ",smallBold));
					        addEmptyLine(paragraph, 1);
						}
						field.setAccessible(false);
	        		}
		        catch (IllegalAccessException e) 
		        	{
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		      }
	        // add a list
	      // createList(subCatPart);
	        
	     //   subCatPart.add(paragraph);
	        
	        
	        

	        // now add all this to the document
	        document.add(paragraph);


	    }


}
